?seq
seq(0, 1, length.out=11)
seq(stats::rnorm(20)) # effectively 'along'
stats
stats::
stats::rnorm(20)
seq(1, 9, by = 2)     # matches 'end'
seq(1, 6, by = 3)
seq(17) # same as 1:17, or even better seq_len(17)
seq(2)
girls<-c('Juliet','Sierra')
boys<-c('Romeo','Oscar')
girls<-c('Juliet','Sierra')
boys<-c('Romeo','Oscar')
everyone<-c(girls,boys)
everyone[2]
everyone[-2]
everone[c(1,3)]
everyone[c(1,3))]
everyone[c(1,3)]
everyone[c(3,1)]
everyone[c(-1,-3)]
x<-c(2,4,6,8)
y<-c(7,8,3,1)
x<-c(2,4,6,8)
y<-c(7,8,3,1)
sumx(x) #sum of vector x
sum(x) #sum of vector x
mean(y) #average of y
2*x
y+3 #create a new vector of y with 3 added to each number
X + y
X+y
x+y
x*y #multiple each position of each x vector by corresponding y one
Names<-c('Romeo','Juliet','Oscar','Sierra')
Gender<-c('M','F','M','F')
Occupation<-c('Clown','Magician','Hobo','Unemployeed')
FaveFood<-c('Tuna','Sausage','Melons','Kimchi')
Winners<-data.frame(Names,Gender,Occupation,FaveFood)
View(Winners)
Winners #Check the table/frame
mtcars #get the preloaded mt cars data table
head(mtcars) #shows the first 6 observations
tail(matcars) #shows last 6 observations
tail(mtcars) #shows last 6 observations
head(mtcars,10) #shows say 10 observatons
tail(mtcars,10) #shows say last 10 observatons
str(mtcars)
str(mtcars) #data structure, then info on each of the vectors
str(winners)
str(Winners)
View(Winners)
summary(mtcars)
summary(mtcars$vs)
str(mat.1K)
hold.df=mat.1k
hold.df = mat.1k
mat.1k
mat.1K
?mat.1K
?apply
apply(mtcars,2,mean)
apply(mtcars,mean)
apply(mtcars,,mean)
apply(mtcars,[1,1],mean)
apply(mtcars,[1],mean)
apply(mtcars,1,mean)
head(mtcars[1,1])
mtcars[1]
ls(mtcars)
str(mtcars)
apply(mtcars,1,mean) #mean of first column
apply(mtcars,1,mean*2) #mean of first column
apply(mtcars,1,log) #mean of first column
apply(mtcars$mpg,mean) #mean of first column
apply(mtcars$mpg,0,mean) #mean of first column
apply(mtcars$mpg,1,mean) #mean of first column
apply(mtcars,1:2,mean) #mean of first column
apply(mtcars,c(1,3)),mean) #mean of first column
apply(mtcars,c(1,3),mean) #mean of first column
apply(mtcars,3,mean) #mean of first column
apply(mtcars,2,mean) #mean of first column
apply(mtcars,1,mean) #mean of first column
apply(mtcars,2,mean) #mean of first column
apply(mtcars,1,sqrt) #sqrt of first column
by(mtcars$mpg,list(am=mtcars$am,cyl=mtcars$cyl),mean)
mtcars[,wt]
mtcars[,c('wt')]
mtcars[c('wt')]
by(mtcars[,c('hp','wt')],list(am=mtcars$am,cyl=mtcars$cyl),mean) # Summarize 2 variables horsepower and weight by transmission and cylanders
tapply(mtcars$mpg,mtcars$am,mean)
tapply(mtcars$mpg,list(mtcars$am,mtcars$cyl,mean)
tapply(mtcars$mpg,list(mtcars$am,mtcars$cyl,mean))
tapply(mtcars$mpg,list(mtcars$am,mtcars$cyl),mean))
tapply(mtcars$mpg,list(mtcars$am,mtcars$cyl),mean)
aggregate(mtcars['mpg'],list(Transmission=mtcars$am),mean)
aggregate(mtcars['mpg'],list(Transmission=mtcars$am),mean) #Average mpg by transmission which is renamed
aggregate(mtcars[c('mpg','hp')],list(Transmission_Type=mtcars$am),mean) #aggregate  horsepower and miles per gallon by transmission type
aggregate(mtcars[c('mpg','hp')],list(Transmission_Type=mtcars$am,Cylinders=mtcars$cyl),mean) #aggregate  horsepower and miles per gallon by transmission type and Cylander
aggregate(mpg~am,my.mtcars,mean)
aggregate(mpg~am,mtcars,mean)
aggregate(mpg~am,mtcars,mean) #quick formula (variables,data,function)-example is show me average miles per gallon in mtcars data by transmission
aggreate(cyl~mpg,mtcars)
aggregate(cyl~mpg,mtcars)
aggregate(cyl~mpg,mtcars,sum)
aggregate(cyl~mpg,mtcars,mean)
aggregate(Cylinders=cyl~mpg,mtcars,mean)
aggregate(cyl~mpg,mtcars,mean)
aggregate(mpg~cyl,mtcars,mean)
aggreagate(mpg~am,mtcars,mean)
aggregate(mpg~am,mtcars,mean)
aggregate(am~mpg,mtcars,mean)
aggregate(mpg~am+cyl,mpg,mean) # use the + sign to add to the grouping
aggregate(mpg~am+cyl,mtcars,mean) # use the + sign to add to the grouping
aggregate(mpg+hp~am+cyl,mtcars,mean) # use the + sign to add to the grouping
aggregate(cbind(mpg,wt,hp)~am+cyl,mtcars,mean)
aggregate(cbind(mpg,wt,hp)~cyl+am,mtcars,mean)
install.packages("rgl")
example(lm)
p1<-installed.packages()
p1$a<-"Acer"
p1<-data.frame(p1)
p1$Type<-"a"
View(`p1`)
installed.packages()
acer<-installed.packages()
acer$Type<-"Acer"
acer<-installed.packages()
install.packages("datamerge")
library("XLConnectJars")
library("XLConnect")
demo()
demo('XLConnect')
demo(XLConnect)
demo(readWorksheet)
demo(summary)
library("RExcelInstaller")
NBA.Attendence.Index <- read.csv("C:/Users/Alex Bresler/Aragorn/Google Drive/Data/NBA/League Data/NBA Attendence Index.csv")
View(NBA.Attendence.Index)
NBA.Attendence.Index$Season
View(NBA.Attendence.Index)
detach("package:XLConnectJars")
detach("package:RExcelInstaller")
detach("package:XLConnect")
detach("package:XLConnectJars")
library("reshapeGUI")
library("plyr")
library("reshape2")
library("stringr")
?melt
demo(Smiths)
Smiths
smiths
example(meltlist)
example(melt.list)
example(melt.dataframe)
example(melt.data.frame)
NBA.Attendence.Index$Season.Id<-
NBA.Attendence.Index$Season.Id
NBA.Attendence.Index$Season.Id<-T
View(NBA.Attendence.Index)
?gsub
example(gsub)
gsub{"",TRUE,NBA.Attendance.Index$Season.Id}
melt(NBA.Attendance.Index,na.rm=F,id=(c"Id.Item","Team.Name","Season"),variable.name=c("Attendance"))
melt(NBA.Attendance.Index,na.rm=F,id=1:2_
melt(NBA.Attendance.Index,na.rm=F,id=1:2)
NBA.Attendence.Index$Season.Id<-NULL
melt(data=NBA.Attendence.Index,id=[,1:3],na.rm=F,value.name="Attendence")
melt(data=NBA.Attendence.Index,id=[,1:3],na.rm=F,value.name="Attendence"))
reshapeGUI()
Players.Agents.Agency.11.12.Salary.Team.DE <- read.csv("C:/Users/Alex Bresler/Aragorn/Google Drive/Data/NBA/DraftExpress/Players.Agents.Agency.11-12.Salary.Team-DE.csv")
View(Players.Agents.Agency.11.12.Salary.Team.DE)
library("reshape2")
library("reshapeGUI")
Players.Agents.Agency.11.12.Salary.Team.DE$X<-Null
Players.Agents.Agency.11.12.Salary.Team.DE$X<-NULL
p<-Players.Agents.Agency.11.12.Salary.Team.DE
aggregate(Team~.,p,sum)
aggregate(Team~Salary,p,sum)
str(p)
as.numeric(p$Salary)
as.numeric(as.character(p$Salary))
as.character(p$Salary)
z<-as.character(p$Salary)
as.numeric(z)
as.numeric(z,na.rm=T)
sum(z)
example(as.numeric)
View(data)
is.integer(z)
as.integer(z)
z
as.real(z)
example(storage.mode)
storage.mode(z)
y<-as.numeric(z)
y
gsub(",","",z)
z<-gsub(",","",z)
as.numeric(z)
sum(z)
mean(z)
z<-as.numeric(z)
mean(z)
rm(airquality)
library("reshapeGUI")
library("gWidgetsRGtk2")
detach("package:gWidgetsRGtk2")
library("rattle")
rattle()
library("speedRlibTF")
library("speedRlibs")
library("speedR")
speedR()
setwd("C:/Users/Alex Bresler/Aragorn/Google Drive/Cleansed Data for API/NBA/Season Data/Aggregate Matchups")
Aggregate.Player.Matchups.2006.2007.Regular.Season.Table$Source<-"Basketball Value"
Aggregate.Player.Matchups.2006.2007.Regular.Season.Table$Season.Type<-"Regular Season"
names(Aggregate.Player.Matchups.2006.2007.Regular.Season.Table)[2]<-"Season"
write.csv(Aggregate.Player.Matchups.2006.2007.Regular.Season.Table,"Aggregate.Player.Matchups.2006.2007.Regular.Season.Table.csv")
Aggregate.Player.Matchups.2007.2008.Regular.Season.Table$Source<-"Basketball Value"
Aggregate.Player.Matchups.2007.2008.Regular.Season.Table$Season.Type<-"Regular Season"
names(Aggregate.Player.Matchups.2007.2008.Regular.Season.Table)[2]<-"Season"
write.csv(Aggregate.Player.Matchups.2007.2008.Regular.Season.Table,"Aggregate.Player.Matchups.2007.2008.Regular.Season.Table.csv")
Aggregate.Player.Matchups.2008.2009.Regular.Season.Table$Source<-"Basketball Value"
Aggregate.Player.Matchups.2008.2009.Regular.Season.Table$Season.Type<-"Regular Season"
names(Aggregate.Player.Matchups.2008.2009.Regular.Season.Table)[2]<-"Season"
write.csv(Aggregate.Player.Matchups.2008.2009.Regular.Season.Table,"Aggregate.Player.Matchups.2008.2009.Regular.Season.Table.csv")
Aggregate.Player.Matchups.2009.2010.Regular.Season.Table$Source<-"Basketball Value"
Aggregate.Player.Matchups.2009.2010.Regular.Season.Table$Season.Type<-"Regular Season"
names(Aggregate.Player.Matchups.2009.2010.Regular.Season.Table)[2]<-"Season"
write.csv(Aggregate.Player.Matchups.2009.2010.Regular.Season.Table,"Aggregate.Player.Matchups.2009.2010.Regular.Season.Table.csv")
Aggregate.Player.Matchups.2007.Playoffs.Table$Source<-"Basketball Value"
Aggregate.Player.Matchups.2007.Playoffs.Table$Season.Type<-"Playoffs"
names(Aggregate.Player.Matchups.2007.Playoffs.Table)[2]<-"Season"
write.csv(Aggregate.Player.Matchups.2007.Playoffs.Table,"Aggregate.Player.Matchups.2007.Playoffs.Table.csv")
Aggregate.Player.Matchups.2008.Playoffs.Table$Source<-"Basketball Value"
Aggregate.Player.Matchups.2008.Playoffs.Table$Season.Type<-"Playoffs"
names(Aggregate.Player.Matchups.2008.Playoffs.Table)[2]<-"Season"
write.csv(Aggregate.Player.Matchups.2008.Playoffs.Table,"Aggregate.Player.Matchups.2008.Playoffs.Table.csv")
Aggregate.Player.Matchups.2009.Playoffs.Table$Source<-"Basketball Value"
Aggregate.Player.Matchups.2009.Playoffs.Table$Season.Type<-"Playoffs"
names(Aggregate.Player.Matchups.2009.Playoffs.Table)[2]<-"Season"
write.csv(Aggregate.Player.Matchups.2009.Playoffs.Table,"Aggregate.Player.Matchups.2009.Playoffs.Table.csv")
Aggregate.Player.Matchups.2010.Playoffs.Table$Source<-"Basketball Value"
Aggregate.Player.Matchups.2010.Playoffs.Table$Season.Type<-"Playoffs"
names(Aggregate.Player.Matchups.2010.Playoffs.Table)[2]<-"Season"
write.csv(Aggregate.Player.Matchups.2010.Playoffs.Table,"Aggregate.Player.Matchups.2010.Playoffs.Table.csv")
Aggregate.Player.Matchups.2011.Playoffs.Table$Source<-"Basketball Value"
Aggregate.Player.Matchups.2011.Playoffs.Table$Season.Type<-"Playoffs"
names(Aggregate.Player.Matchups.2011.Playoffs.Table)[2]<-"Season"
write.csv(Aggregate.Player.Matchups.2011.Playoffs.Table,"Aggregate.Player.Matchups.2011.Playoffs.Table.csv")
